var frequency 0                      // Initialize result to 0
var frequency_list 0
var input_values 0
var counter 0
var frequency_list_counter 1

inp input                         // Get input line

whl input
  var index 0
  var char input[index]           // Set char to be the first character in input
  var plus "+"

  var plus_char_diff plus         // Copy plus
  dec plus_char_diff char         // and subtract char
                                  // If difference is 0, then char is a plus sign

  var char_equals_plus 1          // Assume that char is a plus sign
  var char_not_equals_plus 0      // and change in next step if incorrect

  con plus_char_diff              // If plus_char_diff is not 0, enter block
    var char_equals_plus 0      // Char was not a plus sign, set char_equals_plus to false
    var char_not_equals_plus 1
  end

  inc index                       // Move to next char
  var char input[index]

  whl char                        // For each remaining char on this line
    var index_minus_one index
    dec index_minus_one           // Index - 1 is needed as a new index in the next step

    var number[index_minus_one] char      // Concatenate each char (integer) to a number variable
                                          // Number will (eventually) contain input line without the plus/minus sign
    inc index                     // Move to next char
    var char input[index]
  end

  int number                      // Treat number as an integer
  var input_value 0

  con char_equals_plus            // If
    inc input_value number
  end
  con char_not_equals_plus        // Else
    dec input_value number
  end

  var input_values[counter] input_value

  inc counter
  inp input                       // Get the next line
end

var outer_counter 3

out "Frequencies:"
var initial_frequency frequency_list[0]

str initial_frequency
out initial_frequency
int initial_frequency

whl outer_counter
  //out "Outer"
  var counter 0                     // Reset counter

  whl input_values[counter]                         // Enter block if input is not empty
    //out "Inner"
    var input_value input_values[counter]
    inc frequency input_value             // Add the number to result

    var frequency_list_counter 1

    str frequency
    out frequency
    int frequency

    whl frequency_list[frequency_list_counter]
      //out "Inner inner"
      var element frequency_list[frequency_list_counter]
      inc frequency_list_counter

      var frequency_diff frequency
      dec frequency_diff element

      var element_equals_frequency 1  // Assume that the element equals this frequency

      con frequency_diff              // If frequency_diff is not 0, enter block
        var element_equals_frequency 0        // Element was not equal to this frequency, set element_equals_frequency to false
      end

      con element_equals_frequency
        out "Found frequency twice: " 0
        str element
        out element
        int element

        var frequency_list 0        // Reset lists to break
        var input_values 0

        var outer_counter 1
      end

    end

    var frequency_list[frequency_list_counter] frequency

    inc counter
    inc frequency_list_counter
  end

  str frequency

  //out "Result: " 0
  //out frequency                        // Print the result
  //out ""

  int frequency

  dec outer_counter
end