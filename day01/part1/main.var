var result 0                      // Initialize result to 0

inp input                         // Get input line and its length
var input_length 0
whl input[input_length]           // As long as input has a char at index input_length, increment the index
    inc input_length
end

whl input_length                  // Enter block if input length is more than 0
  var index 0
  var char input[index]
  var plus "+"

  var char2 char                  // Copy char and plus so that we can play with them
  var plus_char_diff plus

  whl char2                       // Set copy of plus to be the difference between itself and char
    dec char2                     // If the difference is 0, then the char is a plus sign
    dec plus_char_diff
  end

  var char_equals_plus 1          // Assume that char is a plus sign
  var char_not_equals_plus 0      // and change in next step if incorrect

  whl plus_char_diff
      var char_equals_plus 0      // Char was not a plus sign, set char_equals_plus to false
      var char_not_equals_plus 1

      var plus_char_diff 0
  end

  inc index                       // Move to next char
  var char input[index]

  whl char                        // For each remaining char on this line
    var index_minus_one index
    dec index_minus_one

    var number[index_minus_one] char      // Concatenate each char (integer) to a number variable

    inc index
    var char input[index]
  end

  int number

  whl char_equals_plus            // If
    inc result number             // Add the number to result
    var char_equals_plus 0
  end
  whl char_not_equals_plus        // Else
    dec result number             // Subtract the number from result
    var char_not_equals_plus 0
  end

  inp input                       // Get the next line
  var input_length 0
  whl input[input_length]
      inc input_length
  end
end

str result

out "Result: "
out result                        // Print the result
out 10